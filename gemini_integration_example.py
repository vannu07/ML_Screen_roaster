#!/usr/bin/env python3
"""
Gemini API Integration Example
This script demonstrates how to integrate the Screen Time Roast Analyzer 
with the actual Google Gemini API for live roast generation.

Note: You'll need to install google-generativeai and get an API key from Google AI Studio.
"""

import os
from screen_time_roast_analyzer import ScreenTimeRoastAnalyzer

# Uncomment the following lines when you have the Gemini API set up
# import google.generativeai as genai

class GeminiRoastGenerator:
    """
    A class to handle actual Gemini API integration for roast generation.
    """
    
    def __init__(self, api_key=None):
        """
        Initialize the Gemini API client.
        
        Args:
            api_key (str): Your Gemini API key. If None, will try to get from environment.
        """
        self.api_key = api_key or os.getenv('GEMINI_API_KEY')
        
        if not self.api_key:
            print("⚠️  Warning: No Gemini API key provided!")
            print("   Set GEMINI_API_KEY environment variable or pass api_key parameter")
            print("   Get your API key from: https://makersuite.google.com/app/apikey")
            self.client = None
        else:
            self.setup_gemini_client()
    
    def setup_gemini_client(self):
        """
        Set up the Gemini API client.
        """
        try:
            # Uncomment when you have google-generativeai installed
            # genai.configure(api_key=self.api_key)
            # self.client = genai.GenerativeModel('gemini-pro')
            print("✅ Gemini API client configured successfully!")
        except Exception as e:
            print(f"❌ Error setting up Gemini API: {e}")
            self.client = None
    
    def generate_roast(self, prompt):
        """
        Generate a roast using the Gemini API.
        
        Args:
            prompt (str): The roast prompt generated by the analyzer
            
        Returns:
            str: The generated roast response
        """
        if not self.client:
            return self.simulate_roast_response(prompt)
        
        try:
            # Uncomment when you have the API set up
            # response = self.client.generate_content(prompt)
            # return response.text
            
            # For now, return simulated response
            return self.simulate_roast_response(prompt)
            
        except Exception as e:
            print(f"❌ Error generating roast: {e}")
            return "Sorry yaar, roast machine thoda busy hai! Try again later! 😅"
    
    def simulate_roast_response(self, prompt):
        """
        Simulate a roast response for demonstration purposes.
        
        Args:
            prompt (str): The roast prompt
            
        Returns:
            str: A simulated roast response
        """
        # Extract key information from prompt for simulation
        if "Instagram" in prompt and "brutal" in prompt.lower():
            return "Bhai, 3.5 ghante Instagram pe? 📱 Itna time mein toh ek startup bana deta! But nahi, tumhe toh bas dusron ki perfect life dekhni hai aur apni life ko compare karna hai! 😂 Paisa kamane ke bajaye paisa waste karne mein expert ho gaye ho! 💸"
        
        elif "TikTok" in prompt and "light" in prompt.lower():
            return "Arre yaar, 4 ghante TikTok pe? 🕺 Itne mein toh dance class join kar lete! But chill hai, Saturday hai, thoda entertainment toh banta hai! Just remember, real life mein bhi kuch productive karna padega! 😄"
        
        elif "YouTube" in prompt and "medium" in prompt.lower():
            return "YouTube pe 2 ghante? 📺 Bhai, 'How to be productive' videos dekhte dekhte hi unproductive ho gaye! Career goals YouTube shorts mein kho gaye kya? Time to close the app and actually DO something! 💪"
        
        elif "Reddit" in prompt and "brutal" in prompt.lower():
            return "2.5 ghante Reddit pe? 🤯 Bhai, itne mein toh gym jaake actual health improve kar lete! But nahi, tumhe toh random strangers ke comments padhne hain! Health ke liye Google kar rahe ho ya memes dekh rahe ho? 😅"
        
        elif "Twitter" in prompt and "medium" in prompt.lower():
            return "Twitter pe 1.5 ghante? 🐦 Bhai, hot takes padhte padhte apna social life cold ho gaya! Real friends se baat karne ka time hai ya bas online drama dekhna hai? Touch some grass, literally! 🌱"
        
        else:
            return "Yaar, screen time dekh ke lagta hai phone tumhara best friend ban gaya hai! 📱 Real world mein bhi kuch time spend karo, wahan bhi interesting cheezein hoti hain! 😉"

class EnhancedScreenTimeAnalyzer(ScreenTimeRoastAnalyzer):
    """
    Enhanced version of the analyzer with Gemini API integration.
    """
    
    def __init__(self, csv_file_path, gemini_api_key=None):
        """
        Initialize with Gemini integration.
        
        Args:
            csv_file_path (str): Path to the CSV file
            gemini_api_key (str): Gemini API key (optional)
        """
        super().__init__(csv_file_path)
        self.gemini_generator = GeminiRoastGenerator(gemini_api_key)
    
    def run_live_roast_simulation(self, user_data):
        """
        Run simulation with actual Gemini API roast generation.
        
        Args:
            user_data (pd.Series): A single row of user data
            
        Returns:
            dict: Dictionary containing user info, prediction, prompt, and actual roast
        """
        # Get the basic simulation result
        result = self.run_roast_simulation(user_data)
        
        # Generate actual roast using Gemini API
        print(f"🤖 Generating roast using Gemini API...")
        actual_roast = self.gemini_generator.generate_roast(result['roast_prompt'])
        
        # Add the actual roast to the result
        result['actual_roast'] = actual_roast
        
        return result
    
    def demonstrate_live_roast_system(self, num_users=3):
        """
        Demonstrate the live roast system with actual API calls.
        
        Args:
            num_users (int): Number of users to demonstrate on
        """
        print("\n" + "=" * 60)
        print("🔥 LIVE ROAST SYSTEM DEMONSTRATION")
        print("=" * 60)
        
        print(f"🎭 Generating LIVE roasts for first {num_users} users...\n")
        
        for i in range(min(num_users, len(self.df))):
            user_data = self.df.iloc[i]
            result = self.run_live_roast_simulation(user_data)
            
            print(f"{'='*50}")
            print(f"🎯 USER {i+1}: {result['user_id']}")
            print(f"{'='*50}")
            print(f"📱 App: {result['app_name']}")
            print(f"⏱️  Actual Usage: {result['actual_usage']} minutes")
            print(f"🔮 Predicted Usage: {result['predicted_usage']:.0f} minutes")
            print(f"🔥 Roast Intensity: {result['roast_intensity'].upper()}")
            print(f"🎯 Roast Category: {result['roast_category']}")
            
            print(f"\n🎭 LIVE GENERATED ROAST:")
            print(f"{'-'*50}")
            print(f"💬 {result['actual_roast']}")
            print(f"{'-'*50}")
            print()

def main():
    """
    Main function to demonstrate Gemini API integration.
    """
    print("🚀 GEMINI API INTEGRATION DEMO")
    print("=" * 50)
    
    # Initialize the enhanced analyzer
    csv_file_path = "sample_roast_data.csv"
    
    # You can pass your Gemini API key here
    # analyzer = EnhancedScreenTimeAnalyzer(csv_file_path, gemini_api_key="your_api_key_here")
    analyzer = EnhancedScreenTimeAnalyzer(csv_file_path)
    
    # Load and prepare data
    analyzer.load_and_prepare_data()
    
    # Prepare and train model (skip EDA for this demo)
    analyzer.prepare_modeling_data()
    analyzer.build_and_train_model()
    
    # Demonstrate live roast generation
    analyzer.demonstrate_live_roast_system(num_users=3)
    
    print("\n" + "=" * 60)
    print("✅ GEMINI INTEGRATION DEMO COMPLETED!")
    print("=" * 60)
    print("🔗 To use real Gemini API:")
    print("   1. Install: pip install google-generativeai")
    print("   2. Get API key from: https://makersuite.google.com/app/apikey")
    print("   3. Set environment variable: GEMINI_API_KEY=your_key")
    print("   4. Uncomment the API code in this file")

if __name__ == "__main__":
    main()